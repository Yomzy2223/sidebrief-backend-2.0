// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "./generated/main"
}

datasource db {
  provider = "postgresql"
  url      = env("MAIN_DATABASE_URL")
}

enum ProductActivityStage {
  START
  PAYMENT
  PROPRIETOR
  REVIEW
}

model Staff {
      id String @id @default(uuid())
      firstName String 
      lastName String
      email String @unique
      password String
      phone String
      verified Boolean
      picture String?
      resetToken String?
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}

model Collaborator {
      id String @id @default(uuid())
      firstName String 
      lastName String
      email String @unique
      password String
      phone String
      picture String?
      verified Boolean
      isPartner Boolean
      resetToken String?
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      collaboratorDocument CollaboratorDocument[]
}

model CollaboratorDocument {
      id String @id @default(uuid())
      name String @unique
      type String
      description String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      collaborator Collaborator @relation(fields: [collaboratorId], references: [id])
      collaboratorId String
}
model Reward {
      id String @id @default(uuid())
      name String @unique
      url String
      descrition String 
      image String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}

model Country {
      id String @id @default(uuid())
      name String @unique
      iso String
      currency String
      code String
      flagUrl String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}

model Bank {
      id String @id @default(uuid())
      name String @unique
      code String
      url String
      image String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}



model Notification {
      id String @id @default(uuid())
      title String
      body String
      readStatus Boolean
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}


model Account {
      id String @id @default(uuid())
      userId String
      type String
      provider String
      scope String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      user User @relation(fields: [userId], references: [id])
}


model User {
      id String @id @default(uuid())
      fullName String
      username String?
      email String @unique
      password String?
      googleId String?
      phone String?
      picture String?
      isVerified Boolean @default(false)
      referral String?
      country String?
      resetToken String?
      isPartner Boolean @default(false)
      isStaff Boolean @default(false)
      isPhoneRegistered Boolean @default(false)
      isPhoneVerified Boolean @default(false)
      isIdentificationRegistered Boolean @default(false)
      isIdentificationVerified Boolean @default(false)
      teamMember TeamMember[]
      partnerPermission String[]
      staffPermission String[]
      userPermission  String[]
      account Account[]
      productRequest ProductRequest[]
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}

model UserDocument {
      id String @id @default(uuid())
      name String
      type String
      description String
      userId String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}
model Service {
      id String @id @default(uuid())
      name String @unique
      description String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      products Product[]
      form ServiceForm[]
}

model ServiceForm {  
      id String @id @default(uuid())
      title String?
      description String?
      type String?
      compulsory Boolean @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      isDeprecated Boolean   @default(false)
      service Service @relation(fields: [serviceId], references: [id])
      serviceId String
      subForm ServiceSubForm[]
}

model ServiceSubForm {  
      id String @id @default(uuid())
      question String?
      type String?
      options String[]
      fileName String?
      fileType String?
      fileLink String?
      fileSize String?
      dependentField String?
      dependentOptions String[]
      allowOther Boolean @default(false)
      compulsory Boolean @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      isDeprecated Boolean   @default(false)
      form ServiceForm @relation(fields: [formId], references: [id])
      formId String
      }
model Product {
      id String @id @default(uuid())
      name String
      description String
      country String
      currency String
      amount Int
      timeline String
      feature String[]
      hasShares Boolean @default(false)
      hasAgent Boolean @default(false)
      hasOwner Boolean @default(false)
      hasController Boolean @default(false)
      controllerIsCalled String?
      OwnerIsCalled String?
      agentIsCalled String?
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      isDeprecated Boolean   @default(false)
      service Service @relation(fields: [serviceId], references: [id])
      serviceId String
      request ProductRequest[]
      form ProductForm[]
}
model ProductForm {  
      id String @id @default(uuid())
      title String? 
      type String?
      description String?
      compulsory Boolean @default(false)
      createdAt DateTime @default(now())
      isDeprecated Boolean   @default(false)
      updatedAt DateTime @default(now())
      product Product @relation(fields: [productId], references: [id])
      productId String
      productSubForm ProductSubForm[]
}
model ProductSubForm {
      id String @id @default(uuid())
      question String?
      options String[]
      type String?
      allowOther Boolean @default(false)
      dependentField String?
      dependentOptions String[]
      fileName String?
      fileType String?
      fileLink String?
      fileSize String?
      compulsory Boolean @default(false)
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      form ProductForm @relation(fields: [formId], references: [id])
      formId String
    

}


model ProductRequest {
      id String @id @default(uuid())
      email String?
      address String?
      paid Boolean @default(false)
      Team Team[]
      completed Boolean @default(false)
      status String @default("pending")
      currentState ProductActivityStage @default(START)
      createdAt DateTime @default(now())
      isDeprecated Boolean   @default(false)
      updatedAt DateTime @default(now())
      product Product? @relation(fields: [productId], references: [id])
      user User @relation(fields: [userId], references: [id])
      productId String?
      userId String
      Payment Payment[]
      requestQA ProductRequestQA[]
}
model ProductRequestQA {  
      id String @id @default(uuid())
      title String? 
      description String?
      type String?
      compulsory Boolean @default(false)
      isGeneral Boolean @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      isDeprecated Boolean   @default(false)
      request ProductRequest @relation(fields: [requestId], references: [id])
      requestId String
      subForm ProductRequestQASubForm[]
}


model ProductRequestQASubForm {
      id String @id @default(uuid())
      question String?
      answer String[]
      type String?
      fileName String?
      fileType String?
      fileLink String?
      fileSize String?
      compulsory Boolean @default(false)
      isDeprecated Boolean   @default(false)
      requestQA ProductRequestQA @relation(fields: [requestQAId], references: [id])
      requestQAId String

}
model Claim {
      id String @id @default(uuid())
      value String
      userId String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      isDeprecated Boolean   @default(false)
}
model Team {
      id String @id @default(uuid())
      name String
      slug String
      userId String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      isDeprecated Boolean   @default(false)
      productRequest ProductRequest @relation(fields: [productRequestId], references: [id])
      productRequestId String
      invitation Invitation[]
      teamMember TeamMember[]
}

model TeamMember {
      id String @id @default(uuid())
      isLaunchMember Boolean
      isLaunchController Boolean
      isLaunchOwner Boolean
      launchOwnership Int
      teamId String
      userId String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      isDeprecated Boolean   @default(false)
      team Team @relation(fields: [teamId], references: [id])
      user User @relation(fields: [userId], references: [id])
}

model Invitation {
      id String @id @default(uuid())
      teamId String
      email String
      token String
      expireIn DateTime
      invitedBy String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      isDeprecated Boolean   @default(false)
      team Team @relation(fields: [teamId], references: [id])
   
}
model Payment  {
      id String @id @default(uuid())
      provider String
      transactionId String
      status String
      email String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      isDeprecated Boolean   @default(false)
      productRequests ProductRequest @relation(fields: [productRequestId], references: [id])
      productRequestId String
}

model Parter {
      id String @id @default(uuid())
      isVerified Boolean
      verificationDocument String[]
      serviceScore Int
      paymentsMade Int
      paymentsDue Int
      paymentDetails String[]
      countrySupported String[]
      serviceSupported String[]
      servicesAssigned String[]
      servicesCompleted String[]
      servicesDeclined String[]
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      isDeprecated Boolean   @default(false)
}
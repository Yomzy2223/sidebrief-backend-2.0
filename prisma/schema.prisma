// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Staff {
      id String @id @default(uuid())
      firstName String 
      lastName String
      email String @unique
      password String
      phone String
      verified Boolean
      picture String?
      resetToken String?
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}

model Collaborator {
      id String @id @default(uuid())
      firstName String 
      lastName String
      email String @unique
      password String
      phone String
      picture String?
      verified Boolean
      isPartner Boolean
      resetToken String?
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      collaboratorDocument CollaboratorDocument[]
}

model CollaboratorDocument {
      id String @id @default(uuid())
      name String @unique
      type String
      description String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      collaborator Collaborator @relation(fields: [collaboratorId], references: [id])
      collaboratorId String
}
model Reward {
      id String @id @default(uuid())
      name String @unique
      url String
      descrition String 
      image String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}

model Country {
      id String @id @default(uuid())
      name String @unique
      iso String
      currency String
      code String
      flagUrl String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}

model Bank {
      id String @id @default(uuid())
      name String @unique
      code String
      url String
      image String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}

model ServiceCategory {
      id String @id @default(uuid())
      name String @unique
      description String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}

model Notification {
      id String @id @default(uuid())
      title String
      body String
      readStatus Boolean
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}

model DiligenceUser { 
      id String @id @default(uuid())
      firstName String
      lastName String
      email String @unique
      password String
      role String
      resetToken String?
      managerId String?
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      diligenceEnterprise DiligenceEnterprise @relation(fields: [diligenceEnterpriseId], references: [id])
      diligenceEnterpriseId String 
}
model DiligenceRequest {
      id String @id @default(uuid())
      name String
      registrationNumber String
      status String
      createdBy String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      diligenceRequestDocument DiligenceRequestDocument[]
      diligenceEnterprise DiligenceEnterprise @relation(fields: [diligenceEnterpriseId], references: [id])
      diligenceEnterpriseId String 
}

model DiligenceRequestDocument {
      id String @id @default(uuid())
      name String @unique
      type String
      description String
      link String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      diligenceRequest DiligenceRequest @relation(fields: [diligenceRequestId], references: [id])
      diligenceRequestId String
}

model DiligenceEnterprise {
      id String @id @default(uuid())
      name String @unique
      address String
      adminEmail String @unique
      color String?
      logo String?
      backdrop String?
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      diligenceManager DiligenceManager[]
      diligenceRequest DiligenceRequest[]
      diligenceUser DiligenceUser[]
}

model DiligenceManager {
      id String @id @default(uuid())
      name String?
      location String?
      managerEmail String @unique
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      diligenceStaff DiligenceStaff[]
      diligenceEnterprise DiligenceEnterprise @relation(fields: [diligenceEnterpriseId], references: [id])
      diligenceEnterpriseId String
}

model DiligenceStaff {
      id String @id @default(uuid())
      email String @unique
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      diligenceManager DiligenceManager @relation(fields: [diligenceManagerId], references: [id])
      diligenceManagerId String
}

model NigerianBank {
      id String @id @default(uuid())
      name String
      color String?
      slug String
      logo String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}



model Account {
      id String @id @default(uuid())
      userId String
      type String
      provider String
      scope String
      user User @relation(fields: [userId], references: [id])
}


model User {
      id String @id @default(uuid())
      firstName String 
      lastName String
      username String?
      email String @unique
      password String
      phone String?
      picture String?
      isVerified Boolean @default(false)
      referral String
      country String?
      resetToken String?
      isPartner Boolean @default(false)
      isStaff Boolean @default(false)
      isPhoneRegistered Boolean @default(false)
      isPhoneVerified Boolean @default(false)
      isIdentificationRegistered Boolean @default(false)
      isIdentificationVerified Boolean @default(false)
      teamMember TeamMember[]
      partnerPermission String[]
      staffPermission String[]
      userPermission  String[]
      account Account[]
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}

model UserDocument {
      id String @id @default(uuid())
      name String
      type String
      description String
      userId String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}
model Service {
      id String @id @default(uuid())
      name String @unique
      description String
      isDeprecated Boolean   @default(false)
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      Entity Entity[]
}
model Entity {
      id String @id @default(uuid())
      name String
      type String
      code String
      description String
      country String
      price String
      timeline String
      hasShares Boolean
      numberOfShares String
      requiredDocuments String[]
      hasAgent Boolean
      hasOwner Boolean
      hasController Boolean
      controllerIsCalled String
      OwnerIsCalled String
      agentIsCalled String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      service Service @relation(fields: [serviceId], references: [id])
      serviceId String
      Launch Launch[]
}
model Launch {
      id String @id @default(uuid())
      name String
      country String
      address String
      paid Boolean
      email String
      description String
      objective String[]
      Team Team[]
      createdBy String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      entity Entity @relation(fields: [entityId], references: [id])
      entityId String
      Payment Payment[]
}
model Claim {
      id String @id @default(uuid())
      value String
      userId String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}
model Team {
      id String @id @default(uuid())
      name String
      slug String
      userId String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      launch Launch @relation(fields: [launchId], references: [id])
      launchId String
      invitation Invitation[]
teamMember TeamMember[]
}

model TeamMember {
      id String @id @default(uuid())
      isLaunchMember Boolean
      isLaunchController Boolean
      isLaunchOwner Boolean
      launchOwnership Int
      teamId String
      userId String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      team Team @relation(fields: [teamId], references: [id])
      user User @relation(fields: [userId], references: [id])
     
}

model Invitation {
      id String @id @default(uuid())
      teamId String
      email String
      token String
      expireIn DateTime
      invitedBy String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      team Team @relation(fields: [teamId], references: [id])
   
}
model Payment  {
      id String @id @default(uuid())
      provider String
      transactionId String
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
      launch Launch @relation(fields: [launchId], references: [id])
      launchId String
}

model Parter {
      id String @id @default(uuid())
      isVerified Boolean
      verificationDocument String[]
      serviceScore Int
      paymentsMade Int
      paymentsDue Int
      paymentDetails String[]
      countrySupported String[]
      serviceSupported String[]
      servicesAssigned String[]
      servicesCompleted String[]
      servicesDeclined String[]
      createdAt DateTime @default(now())
      updatedAt DateTime @default(now())
}